/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: ART_ILLUMINA {
        ext.args = "-amp -p -na -c ${params.amplicon_read_count}"
        publishDir = [
            path: { "${params.outdir}/art_illumina" },
            mode: params.publish_dir_mode
        ]
    }

    withName: BOWTIE2_ALIGN {
        ext.args = "--local --very-sensitive-local --mp 32 --rdg 10,8 --rfg 10,8 -k 10000 -f"
        ext.args2 = "-b | samtools sort"
        publishDir = [
            path: { "${params.outdir}/bowtie2" },
            mode: params.publish_dir_mode
        ]
    }

    withName: BOWTIE2_BUILD {
        publishDir = [
            path: { "${params.outdir}/bowtie2" },
            mode: params.publish_dir_mode
        ]
    }

    withName: JAPSA_CAPSIM {
        ext.args = [
            "--fmedian ${params.target_capture_fmedian}",
            "--fshape ${params.target_capture_fshape}",
            "--smedian ${params.target_capture_smedian}",
            "--sshape ${params.target_capture_sshape}",
            params.target_capture_tmedian ? "--tmedian ${params.target_capture_tmedian}" : "",
            params.target_capture_tshape ? "--tshape ${params.target_capture_tshape}" : "",
            "--num ${params.target_capture_num}",
            params.target_capture_mode == "illumina" ?
                "--illen ${params.target_capture_illen}" : "--pblen ${params.target_capture_pblen}",
            params.target_capture_mode == "illumina" ?
                "--ilmode ${params.target_capture_ilmode} --miseq" : "--pacbio"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/capsim" },
            mode: params.publish_dir_mode
        ]
    }

    withName: CRABS_DBIMPORT {
        ext.args = "--seq_header species --delim ' '"
        publishDir = [
            path: { "${params.outdir}/crabs_dbimport" },
            mode: params.publish_dir_mode
        ]
    }

    withName: CRABS_INSILICOPCR {
        ext.args = "--error ${params.amplicon_crabs_ispcr_error} -t 12 --fwd ${params.amplicon_fw_primer} --rev ${params.amplicon_rv_primer}"
        publishDir = [
            path: { "${params.outdir}/crabs_insilicopcr" },
            mode: params.publish_dir_mode
        ]
    }

    withName: CREATE_SAMPLESHEET {
        publishDir = [
            path: { "${params.outdir}/samplesheet_individual_samples" },
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: INSILICOSEQ_GENERATE {
        ext.args = [
            "--abundance ${params.metagenome_abundance}",
            "--n_reads ${params.metagenome_n_reads}",
            "--mode ${params.metagenome_mode}",
            params.metagenome_mode == "basic" ? "" : "--model ${params.metagenome_model}",
            params.metagenome_coverage ? "--coverage ${params.metagenome_coverage}" : "",
            params.metagenome_gc_bias ? "--gc_bias ${params.metagenome_gc_bias}" : ""
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/insilicoseq" },
            mode: params.publish_dir_mode
        ]
    }

    withName: MERGE_FASTAS {
        publishDir = [
            path: { "${params.outdir}/merged_fastas" },
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }

    withName: MERGE_SAMPLESHEETS {
        publishDir = [
            path: { "${params.outdir}/samplesheet" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NCBIGENOMEDOWNLOAD {
        ext.args = " -N --formats fasta"
        publishDir = [
            path: { "${params.outdir}/ncbigenomedownload" },
            mode: params.publish_dir_mode
        ]
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/bowtie2" },
            mode: params.publish_dir_mode
        ]
    }

    withName: UNCOMPRESS_FASTA {
        publishDir = [
            path: { "${params.outdir}/uncompress_fasta" },
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }

    withName: UNZIP {
        publishDir = [
            path: { "${params.outdir}/probes" },
            mode: params.publish_dir_mode
        ]
    }

    withName: WGSIM {
        ext.args = [
            "-e ${params.wholegenome_error_rate}",
            "-d ${params.wholegenome_outer_dist}",
            "-s ${params.wholegenome_standard_dev}",
            "-N ${params.wholegenome_n_reads}",
            "-1 ${params.wholegenome_r1_length}",
            "-2 ${params.wholegenome_r2_length}",
            "-r ${params.wholegenome_mutation_rate}",
            "-R ${params.wholegenome_indel_fraction}",
            "-X ${params.wholegenome_indel_extended}"
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/wgsim" },
            mode: params.publish_dir_mode
        ]
    }
}
